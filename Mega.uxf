<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>945</x>
      <y>720</y>
      <w>175</w>
      <h>145</h>
    </coordinates>
    <panel_attributes>Timer
--
- executionTime: clockT
--
+ startTimer: void
+ stopTimer: void
+ resetTimer: void
+ displayTimerInformation: void
+ getExecutionTimeInMicroseconds: long
+ Timer(): constructor</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>945</x>
      <y>570</y>
      <w>165</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>IntNode
--

--
bg=cyan
- nodeData : int
- nodePointer : intNode*
--
+ getNodeData() : int
+ getNodePointer() : intNode*
+ setNodeData(int) : void
+ setNodePointer (intNode*) : void 

+ IntNode() : constructor
+ IntNode(int) : construcor
+ IntNode(int, IntNode*) : constructor</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>675</x>
      <y>595</y>
      <w>145</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- head : IntNode*
- size : int
--
+ IntNodeArray(int) : constructor
+ getSize() : int
+ getFromIndex(int) : int
+ setAtIndex(int index, int value) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>815</x>
      <y>635</y>
      <w>140</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n
</panel_attributes>
    <additional_attributes>10.0;10.0;150.0;10.0;150.0;50.0;260.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>645</x>
      <y>260</y>
      <w>230</w>
      <h>135</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
-nodeData : Type
- nodePointer : Node&lt;Type&gt;*
--
Constructors
+ Node&lt;Type&gt;() : constructor
+ Node&lt;Type&gt;(Type value) : constructor
+ Node&lt;Type&gt;(Type value, Node&lt;Type&gt;* next) : constructor

Accessors
+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt;*
+ setNodeData(Type value): void
+ setNodePointer(Node&lt;Type&gt; * next) : void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>645</x>
      <y>215</y>
      <w>50</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>Created by
Aaron Farr
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>950</x>
      <y>235</y>
      <w>245</w>
      <h>145</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
- front : Node&lt;Type&gt; *
- size : int

--
+ Array&lt;Type&gt;() : default constructor
+ Array&lt;Type&gt;(int size) : constructor

+ ~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

+ getSize() const : int
+ getFront() const : int

+ getFromIndex(int index) : Type
+ setAtIndex(int index, Type value) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>870</x>
      <y>310</y>
      <w>90</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n
</panel_attributes>
    <additional_attributes>160.0;10.0;70.0;10.0;70.0;30.0;10.0;30.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>910</x>
      <y>405</y>
      <w>235</w>
      <h>145</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- front : Node&lt;Type&gt; *
- size : int
--
+ List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : destructor

+ addAtIndex(int index, Type value) : void
+ add(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : Node&lt;type&gt; * 
+ getEnd() const : Node&lt;Type&gt; *</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>870</x>
      <y>350</y>
      <w>155</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>290.0;110.0;290.0;80.0;110.0;80.0;110.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>715</x>
      <y>390</y>
      <w>15</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>550</x>
      <y>435</y>
      <w>325</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type
- nodePointer : BiDirectionalNode&lt;Type&gt; * 
- previousPointer : BiDirectionalNode&lt;Type&gt; *

--
+ BiDriectionalNode&lt;Type&gt;() : constructor
+ BiDirectionalNode&lt;Type&gt;(Type value) : constructor
+ BiDirectionalNode&lt;Type&gt;(Type value, BiDirectionalNode&lt;Type&gt;* next) : constructor

+ getNodeData() : Type
+ getNodePointer() : BiDirectionalNode&lt;Type&gt;*
+ getPreviousPointer() : BiDirectionalNode&lt;type&gt;*

+ setNodeData(Type value) : void
+ setNodePointer() : BiDirectionalNode&lt;Type&gt;*
+ set PreviousPointer() : BiDirectionalNode&lt;Type&gt;*

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>170</x>
      <y>140</y>
      <w>345</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>/Model :: DoubleLinkedList&lt;Type&gt;/
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ getSize() const : int
+ getFront() const : BiDirectionalNode&lt;type&gt; * 
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *

add(Type value)
remove(int)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>120</x>
      <y>0</y>
      <w>95</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;170.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>510</x>
      <y>275</y>
      <w>175</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;180.0;10.0;180.0;260.0;310.0;260.0;310.0;320.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>450</y>
      <w>140</w>
      <h>135</h>
    </coordinates>
    <panel_attributes>Model :: Stack&lt;Type&gt;
--
- front : BiDriectionalNode&lt;Type&gt;*
- end: BiDirectionalNode&lt;Type&gt;*
- size : int
--
+ Stack() : constructor
+ ~Stack() : destructor

+ push(Type data) : void
+ pop() : Type
+ peek() : Type

+ add(Type data) : void
+ remove(int index) : Type
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>245</x>
      <y>580</y>
      <w>175</w>
      <h>145</h>
    </coordinates>
    <panel_attributes>Model :: DoubleList&lt;Type&gt;
--
- front : BiDriectionalNode&lt;Type&gt;*
- end: BiDirectionalNode&lt;Type&gt;*
- size : int
--
+ DoubleList() : constructor
+ ~DoubleList() : destructor

+ addFront(Type data) : void
+ addEnd(Type data) : void
+ addAtIndex(int index, Type data) : void
+ addFastIndex(int index, Type value) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>50</x>
      <y>345</y>
      <w>265</w>
      <h>115</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>510.0;10.0;510.0;150.0;10.0;150.0;10.0;210.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>300</x>
      <y>345</y>
      <w>45</w>
      <h>245</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;150.0;70.0;150.0;70.0;470.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>355</x>
      <y>440</y>
      <w>160</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>Model :: CircularList
--
- front : BiDriectionalNode&lt;Type&gt;*
- end: BiDirectionalNode&lt;Type&gt;*
- size : int
--
+ CircularList() : constructor
+ ~CircularList() : destructor

+ add(Type data) : void
+ remove(int index) : Type
+ addAtIndex(int index, Type data) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>300</x>
      <y>345</y>
      <w>165</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;150.0;310.0;150.0;310.0;190.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>175</x>
      <y>455</y>
      <w>130</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>Model :: Queue
--
- front : BiDriectionalNode&lt;Type&gt;*
- end: BiDirectionalNode&lt;Type&gt;*
- size : int
--
+ Queue() : constructor
+ ~Queue() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue() : Type
+ peek() : Type</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>240</x>
      <y>345</y>
      <w>75</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>130.0;10.0;130.0;150.0;10.0;150.0;10.0;220.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>775</x>
      <y>45</y>
      <w>335</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
- nodeData : Type (inheritedd)
- rootPointer : TreeNode&lt;Type&gt; *
- leftChildPointer : BinarySeachTreeNode&lt;Type&gt; *
- rigtChildPointer : BinarySearchTreeNode&lt;Type&gt; *
--

+ getRootPoinnter() : BinarySeachTreeNode&lt;Type&gt; *
+ getLeftChildPointer() : BinarySeachTreeNode&lt;Type&gt; *
+ getRightChildPointer() : BinarySeachTreeNode&lt;Type&gt; *

+ setRootChldPointer(BinarySeachTreeNode&lt;Type&gt; * root) : void
+ setLeftChildPointer(BinarySeachTreeNode&lt;Type&gt; * left) : void
+ setRightChildPointer(BinarySeachTreeNode&lt;Type&gt; * right) : void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>780</x>
      <y>210</y>
      <w>70</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;100.0;120.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1190</x>
      <y>595</y>
      <w>270</w>
      <h>275</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree&lt;Type&gt;
--
- root : BinarySearchTreeNode&lt;Type&gt; *

--
+ BinarySearchTree() : constructor
+ ~BinarySearchTree() : destructor

+ getRoot() : BinarySearchTreeNode&lt;Type&gt; *
+ setRoot(BinarySearchTreeNode&lt;Type&gt; * root) : void

# calculateSize(BinarySearchTreeNode&lt;Type&gt; *) : int
# calculateHeight(BinarySearchTreeNode&lt;Type&gt; *) : int
# isComplete(BinarySearchTreeNode&lt;Type&gt; *) : bool
# isBalanced(BinarySearchTreeNode&lt;Type&gt; *) : bool

# removeNode(BinarySearchTreeNode&lt;Type&gt; *) : void

# inOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
# preOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
# postOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void 

+ getSize() : int
+ getHeight() : int
+ isBalanced() : bool
+ isComplete() : bool

+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void

+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1190</x>
      <y>405</y>
      <w>270</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>Model :: Tree&lt;Type&gt;
--

/+ getSize() : int/
/+ getHeight() : int/
/+ isComplete() : bool/
/+ isBalanced() : bool/


/+ inOrderTraversal() : void/
/+ preOrderTraversal() : void/
/+ postOrderTraversal() : void/

/+ insert(Type) : void/
/+ contains(Type) : bool/
/+ remove(Type) : void/</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
