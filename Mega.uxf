<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1890</x>
      <y>1440</y>
      <w>350</w>
      <h>290</h>
    </coordinates>
    <panel_attributes>Timer
--
- executionTime: clockT
--
+ startTimer: void
+ stopTimer: void
+ resetTimer: void
+ displayTimerInformation: void
+ getExecutionTimeInMicroseconds: long
+ Timer(): constructor</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1890</x>
      <y>1140</y>
      <w>330</w>
      <h>280</h>
    </coordinates>
    <panel_attributes>IntNode
--

--
bg=cyan
- nodeData : int
- nodePointer : intNode*
--
+ getNodeData() : int
+ getNodePointer() : intNode*
+ setNodeData(int) : void
+ setNodePointer (intNode*) : void 

+ IntNode() : constructor
+ IntNode(int) : construcor
+ IntNode(int, IntNode*) : constructor</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1350</x>
      <y>1190</y>
      <w>290</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- head : IntNode*
- size : int
--
+ IntNodeArray(int) : constructor
+ getSize() : int
+ getFromIndex(int) : int
+ setAtIndex(int index, int value) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1630</x>
      <y>1270</y>
      <w>280</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n
</panel_attributes>
    <additional_attributes>10.0;10.0;150.0;10.0;150.0;50.0;260.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1290</x>
      <y>520</y>
      <w>460</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
-nodeData : Type
- nodePointer : Node&lt;Type&gt;*
--
Constructors
+ Node&lt;Type&gt;() : constructor
+ Node&lt;Type&gt;(Type value) : constructor
+ Node&lt;Type&gt;(Type value, Node&lt;Type&gt;* next) : constructor

Accessors
+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt;*
+ setNodeData(Type value): void
+ setNodePointer(Node&lt;Type&gt; * next) : void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1290</x>
      <y>430</y>
      <w>100</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Created by
Aaron Farr
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1900</x>
      <y>470</y>
      <w>490</w>
      <h>290</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
- front : Node&lt;Type&gt; *
- size : int

--
+ Array&lt;Type&gt;() : default constructor
+ Array&lt;Type&gt;(int size) : constructor

+ ~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

+ getSize() const : int
+ getFront() const : int

+ getFromIndex(int index) : Type
+ setAtIndex(int index, Type value) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1740</x>
      <y>620</y>
      <w>180</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n
</panel_attributes>
    <additional_attributes>160.0;10.0;70.0;10.0;70.0;30.0;10.0;30.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1820</x>
      <y>810</y>
      <w>470</w>
      <h>290</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- front : Node&lt;Type&gt; *
- size : int
--
+ List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : destructor

+ addAtIndex(int index, Type value) : void
+ add(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : Node&lt;type&gt; * 
+ getEnd() const : Node&lt;Type&gt; *</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1740</x>
      <y>700</y>
      <w>310</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>290.0;110.0;290.0;80.0;110.0;80.0;110.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1430</x>
      <y>780</y>
      <w>30</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1100</x>
      <y>870</y>
      <w>650</w>
      <h>280</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type
- nodePointer : BiDirectionalNode&lt;Type&gt; * 
- previousPointer : BiDirectionalNode&lt;Type&gt; *

--
+ BiDriectionalNode&lt;Type&gt;() : constructor
+ BiDirectionalNode&lt;Type&gt;(Type value) : constructor
+ BiDirectionalNode&lt;Type&gt;(Type value, BiDirectionalNode&lt;Type&gt;* next) : constructor

+ getNodeData() : Type
+ getNodePointer() : BiDirectionalNode&lt;Type&gt;*
+ getPreviousPointer() : BiDirectionalNode&lt;type&gt;*

+ setNodeData(Type value) : void
+ setNodePointer() : BiDirectionalNode&lt;Type&gt;*
+ set PreviousPointer() : BiDirectionalNode&lt;Type&gt;*

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>340</x>
      <y>330</y>
      <w>690</w>
      <h>420</h>
    </coordinates>
    <panel_attributes>/Model :: DoubleLinkedList&lt;Type&gt;/
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ getSize() const : int
+ getFront() const : BiDirectionalNode&lt;type&gt; * 
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *

add(Type value)
remove(int)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>240</x>
      <y>0</y>
      <w>190</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;170.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1020</x>
      <y>600</y>
      <w>350</w>
      <h>290</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;180.0;10.0;180.0;210.0;310.0;210.0;310.0;270.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>900</y>
      <w>280</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>Model :: Stack&lt;Type&gt;
--
- front : BiDriectionalNode&lt;Type&gt;*
- end: BiDirectionalNode&lt;Type&gt;*
- size : int
--
+ Stack() : constructor
+ ~Stack() : destructor

+ push(Type data) : void
+ pop() : Type
+ peek() : Type

+ add(Type data) : void
+ remove(int index) : Type
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>490</x>
      <y>1160</y>
      <w>350</w>
      <h>290</h>
    </coordinates>
    <panel_attributes>Model :: DoubleList&lt;Type&gt;
--
- front : BiDriectionalNode&lt;Type&gt;*
- end: BiDirectionalNode&lt;Type&gt;*
- size : int
--
+ DoubleList() : constructor
+ ~DoubleList() : destructor

+ addFront(Type data) : void
+ addEnd(Type data) : void
+ addAtIndex(int index, Type data) : void
+ addFastIndex(int index, Type value) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>100</x>
      <y>740</y>
      <w>530</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>510.0;10.0;510.0;100.0;10.0;100.0;10.0;160.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>600</x>
      <y>740</y>
      <w>90</w>
      <h>440</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0;70.0;100.0;70.0;420.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>710</x>
      <y>880</y>
      <w>320</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>Model :: CircularList
--
- front : BiDriectionalNode&lt;Type&gt;*
- end: BiDirectionalNode&lt;Type&gt;*
- size : int
--
+ CircularList() : constructor
+ ~CircularList() : destructor

+ add(Type data) : void
+ remove(int index) : Type
+ addAtIndex(int index, Type data) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>600</x>
      <y>740</y>
      <w>330</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0;310.0;100.0;310.0;140.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>350</x>
      <y>910</y>
      <w>260</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>Model :: Queue
--
- front : BiDriectionalNode&lt;Type&gt;*
- end: BiDirectionalNode&lt;Type&gt;*
- size : int
--
+ Queue() : constructor
+ ~Queue() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue() : Type
+ peek() : Type</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>480</x>
      <y>740</y>
      <w>150</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>130.0;10.0;130.0;100.0;10.0;100.0;10.0;170.0</additional_attributes>
  </element>
</diagram>
