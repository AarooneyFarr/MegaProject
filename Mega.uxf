<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>4</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>832</x>
      <y>748</y>
      <w>140</w>
      <h>116</h>
    </coordinates>
    <panel_attributes>Timer
--
- executionTime: clockT
--
+ startTimer: void
+ stopTimer: void
+ resetTimer: void
+ displayTimerInformation: void
+ getExecutionTimeInMicroseconds: long
+ Timer(): constructor
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>520</x>
      <y>44</y>
      <w>132</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>IntNode
--

--
- nodeData : int
- nodePointer : intNode*
--
+ getNodeData() : int
+ getNodePointer() : intNode*
+ setNodeData(int) : void
+ setNodePointer (intNode*) : void 

+ IntNode() : constructor
+ IntNode(int) : construcor
+ IntNode(int, IntNode*) : constructor
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>404</x>
      <y>184</y>
      <w>116</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- head : IntNode*
- size : int
--
+ IntNodeArray(int) : constructor
+ getSize() : int
+ getFromIndex(int) : int
+ setAtIndex(int index, int value) : void
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>460</x>
      <y>88</y>
      <w>68</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n
</panel_attributes>
    <additional_attributes>10.0;240.0;20.0;10.0;150.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>600</x>
      <y>368</y>
      <w>184</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
-nodeData : Type
- nodePointer : Node&lt;Type&gt;*
--
Constructors
+ Node&lt;Type&gt;() : constructor
+ Node&lt;Type&gt;(Type value) : constructor
+ Node&lt;Type&gt;(Type value, Node&lt;Type&gt;* next) : constructor

Accessors
+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt;*
+ setNodeData(Type value): void
+ setNodePointer(Node&lt;Type&gt; * next) : void

bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>600</x>
      <y>332</y>
      <w>40</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>Created by
Aaron Farr
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>844</x>
      <y>348</y>
      <w>196</w>
      <h>116</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
- front : Node&lt;Type&gt; *
- size : int

--
+ Array&lt;Type&gt;() : default constructor
+ Array&lt;Type&gt;(int size) : constructor

+ ~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

+ getSize() const : int
+ getFront() const : int

+ getFromIndex(int index) : Type
+ setAtIndex(int index, Type value) : void
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>780</x>
      <y>408</y>
      <w>72</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n
</panel_attributes>
    <additional_attributes>160.0;10.0;70.0;10.0;70.0;30.0;10.0;30.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>812</x>
      <y>484</y>
      <w>188</w>
      <h>116</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- front : Node&lt;Type&gt; *
- size : int
--
+ List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : destructor

+ addAtIndex(int index, Type value) : void
+ add(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : Node&lt;type&gt; * 
+ getEnd() const : Node&lt;Type&gt; *
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>780</x>
      <y>440</y>
      <w>124</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>290.0;110.0;290.0;80.0;110.0;80.0;110.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>656</x>
      <y>472</y>
      <w>12</w>
      <h>44</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>524</x>
      <y>508</y>
      <w>260</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type
- nodePointer : BiDirectionalNode&lt;Type&gt; * 
- previousPointer : BiDirectionalNode&lt;Type&gt; *

--
+ BiDriectionalNode&lt;Type&gt;() : constructor
+ BiDirectionalNode&lt;Type&gt;(Type value) : constructor
+ BiDirectionalNode&lt;Type&gt;(Type value, BiDirectionalNode&lt;Type&gt;* next) : constructor

+ getNodeData() : Type
+ getNodePointer() : BiDirectionalNode&lt;Type&gt;*
+ getPreviousPointer() : BiDirectionalNode&lt;type&gt;*

+ setNodeData(Type value) : void
+ setNodePointer() : BiDirectionalNode&lt;Type&gt;*
+ set PreviousPointer() : BiDirectionalNode&lt;Type&gt;*


bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>220</x>
      <y>272</y>
      <w>276</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>/Model :: DoubleLinkedList&lt;Type&gt;/
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ getSize() const : int
+ getFront() const : BiDirectionalNode&lt;type&gt; * 
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *

add(Type value)
remove(int)
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>492</x>
      <y>380</y>
      <w>140</w>
      <h>136</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;180.0;10.0;180.0;260.0;310.0;260.0;310.0;320.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>84</x>
      <y>520</y>
      <w>112</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>Model :: Stack&lt;Type&gt;
--
- front : BiDriectionalNode&lt;Type&gt;*
- end: BiDirectionalNode&lt;Type&gt;*
- size : int
--
+ Stack() : constructor
+ ~Stack() : destructor

+ push(Type data) : void
+ pop() : Type
+ peek() : Type

+ add(Type data) : void
+ remove(int index) : Type

bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>280</x>
      <y>624</y>
      <w>140</w>
      <h>116</h>
    </coordinates>
    <panel_attributes>Model :: DoubleList&lt;Type&gt;
--
- front : BiDriectionalNode&lt;Type&gt;*
- end: BiDirectionalNode&lt;Type&gt;*
- size : int
--
+ DoubleList() : constructor
+ ~DoubleList() : destructor

+ addFront(Type data) : void
+ addEnd(Type data) : void
+ addAtIndex(int index, Type data) : void
+ addFastIndex(int index, Type value) : void
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>124</x>
      <y>436</y>
      <w>212</w>
      <h>92</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>510.0;10.0;510.0;150.0;10.0;150.0;10.0;210.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>324</x>
      <y>436</y>
      <w>36</w>
      <h>196</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;150.0;70.0;150.0;70.0;470.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>368</x>
      <y>512</y>
      <w>128</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>Model :: CircularList
--
- front : BiDriectionalNode&lt;Type&gt;*
- end: BiDirectionalNode&lt;Type&gt;*
- size : int
--
+ CircularList() : constructor
+ ~CircularList() : destructor

+ add(Type data) : void
+ remove(int index) : Type
+ addAtIndex(int index, Type data) : void
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>324</x>
      <y>436</y>
      <w>132</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;150.0;310.0;150.0;310.0;190.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>224</x>
      <y>524</y>
      <w>104</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>Model :: Queue
--
- front : BiDriectionalNode&lt;Type&gt;*
- end: BiDirectionalNode&lt;Type&gt;*
- size : int
--
+ Queue() : constructor
+ ~Queue() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue() : Type
+ peek() : Type
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>276</x>
      <y>436</y>
      <w>60</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>130.0;10.0;130.0;150.0;10.0;150.0;10.0;220.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>704</x>
      <y>196</y>
      <w>268</w>
      <h>136</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
- nodeData : Type (inheritedd)
- rootPointer : TreeNode&lt;Type&gt; *
- leftChildPointer : BinarySeachTreeNode&lt;Type&gt; *
- rigtChildPointer : BinarySearchTreeNode&lt;Type&gt; *
--

+ getRootPoinnter() : BinarySeachTreeNode&lt;Type&gt; *
+ getLeftChildPointer() : BinarySeachTreeNode&lt;Type&gt; *
+ getRightChildPointer() : BinarySeachTreeNode&lt;Type&gt; *

+ setRootChldPointer(BinarySeachTreeNode&lt;Type&gt; * root) : void
+ setLeftChildPointer(BinarySeachTreeNode&lt;Type&gt; * left) : void
+ setRightChildPointer(BinarySeachTreeNode&lt;Type&gt; * right) : void

bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>708</x>
      <y>328</y>
      <w>56</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;100.0;120.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1064</x>
      <y>192</y>
      <w>216</w>
      <h>256</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree&lt;Type&gt;
--
- root : BinarySearchTreeNode&lt;Type&gt; *

--
+ BinarySearchTree() : constructor
+ ~BinarySearchTree() : destructor

+ getRoot() : BinarySearchTreeNode&lt;Type&gt; *
+ setRoot(BinarySearchTreeNode&lt;Type&gt; * root) : void

# calculateSize(BinarySearchTreeNode&lt;Type&gt; *) : int
# calculateHeight(BinarySearchTreeNode&lt;Type&gt; *) : int
# isComplete(BinarySearchTreeNode&lt;Type&gt; *) : bool
# isBalanced(BinarySearchTreeNode&lt;Type&gt; *) : bool

# removeNode(BinarySearchTreeNode&lt;Type&gt; *) : void

# getLeftMostChild(BinarySearchTreeNode&lt;Type&gt; *) : BinarySearchTreeNode&lt;Type&gt; *
# getRightMostChild(BinarySearchTreeNode&lt;Type&gt; *) : BinarySearchTreeNode&lt;Type&gt; *


# inOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
# preOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
# postOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void 

+ getSize() : int
+ getHeight() : int
+ isBalanced() : bool
+ isComplete() : bool

+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void

+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void
+ findMaximum() : Type
+ findMinimum() : Type

bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1036</x>
      <y>484</y>
      <w>216</w>
      <h>136</h>
    </coordinates>
    <panel_attributes>Model :: Tree&lt;Type&gt;
--

/+ getSize() : int/
/+ getHeight() : int/
/+ isComplete() : bool/
/+ isBalanced() : bool/


/+ inOrderTraversal() : void/
/+ preOrderTraversal() : void/
/+ postOrderTraversal() : void/

/+ insert(Type) : void/
/+ contains(Type) : bool/
/+ remove(Type) : void/
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1036</x>
      <y>632</y>
      <w>272</w>
      <h>152</h>
    </coordinates>
    <panel_attributes>Model :: AVLTree&lt;Type&gt; 
--
#root : BinarySearchTreeNode&lt;Type&gt; * (inherited)
--

+ AVLTree() : constructor
+ ~AVLTree() : destructor

*AVL Rotataions*
- leftRotation(BinarySearchTreeNode&lt;Type&gt; * parent) : BinarySearchTreeNode&lt;Type&gt; *
- rigthRotation(BinarySearchTreeNode&lt;Type&gt; * first) : BinarySearchTreeNode&lt;Type&gt; *
- leftRightRotation(BinarySearchTreeNode&lt;Type&gt; * first) : BinarySearchTreeNode&lt;Type&gt; *
- rightLeftRotation(BinarySearchTreeNode&lt;Type&gt; * first) : BinarySearchTreeNode&lt;Type&gt; *

*Helper Methods*
- insertNode(BinarySearchTreeNode&lt;Type&gt; *, Type value) : BinarySearchTreeNode&lt;Type&gt; *
- removeNode(BinarySearchTreeNode&lt;Type&gt; *, Type value) : BinarySearchTreeNode&lt;Type&gt; *
- balanceSubTree(BinarySearchTreeNode&lt;Type&gt; *) : BinarySearchTreeNode&lt;Type&gt; *
-heightDifference(BinarySearchTreeNode&lt;Type&gt; * parent) : int

*Data Operations*
+ insert(Type) : void
+ remove(Type) : void

bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>736</x>
      <y>52</y>
      <w>224</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>HashNode&lt;Type&gt;
--
- data : Type
- key : long
--
+ HashNode() : constructor
+ HashNode(Type data) : constructor

+ getData() : Type
+ getKey() const: long
+ setData(Type data) : void
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1072</x>
      <y>48</y>
      <w>216</w>
      <h>136</h>
    </coordinates>
    <panel_attributes>Model :: HashTable&lt;Type&gt;
--
- capacity : long
- size : long
- efficiencyPercentage : double
- HashTableStorage ** : Type
- isPrime(long sampleNumber) : bool
- resize() : void
- nextPrime(long current) : long
- findPositioin(Type data) : long
- handleCollision(Type data, long currentPosition) : long
--
+ HashTable() : construcor
+ ~HashTable() : destructor
+ add(Type data): void
+ remove(Type data) : bool
+ displayContents() : void
+ getSize() : long
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>580</x>
      <y>152</y>
      <w>88</w>
      <h>224</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>200.0;540.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>676</x>
      <y>156</y>
      <w>68</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;530.0;20.0;20.0;150.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>956</x>
      <y>116</y>
      <w>124</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;290.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>968</x>
      <y>224</y>
      <w>104</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;240.0;10.0</additional_attributes>
  </element>
</diagram>
